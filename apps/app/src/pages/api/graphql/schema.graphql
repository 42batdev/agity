type Query {
    getUserProfile: Profile

    searchProfiles(input: SearchProfilesInput!): SearchProfilesResult!

    getTeam(id: ID!): Team
}

type Mutation {
    createUserProfile (input: CreateUserProfileInput!): Profile
    updateUserProfile(input: UpdateProfileInput!): Profile

    inviteMembers(input: InviteMembersInput!): Team
    removeMember(input: RemoveMemberInput!): Team
    updateMemberPermission(input: UpdateMemberPermissionInput!) : Team

    createTeam (input: CreateTeamInput!): Team
    updateTeam (input: UpdateTeamInput!): Team

    createMeeting (input: CreateMeetingInput!): Meeting
}

type Profile {
    id: ID!
    uid: String!
    name: String!
    avatar: Avatar
    teams: [Team!]
}

input CreateUserProfileInput {
    uid: String!
    name: String
}

input UpdateProfileInput {
    uid: String
    name: String
    avatar: AvatarInput
}

input AvatarInput {
    filename: String
}

input SearchProfilesInput {
    uid: String
    name: String
    limit: Int
}

type SearchProfilesResult {
    profiles: [Profile!]!
    count: Int!
}

type Avatar {
    url: String
    filename: String
}

type Team {
    id: ID!
    tid: String!
    uid: String!
    name: String!
    myPermissions: TeamPermission!
    members: [Member!]!
}

type TeamPermission {
    permissionLevel: PermissionLevel!
}

enum PermissionLevel {
    OWNER, ADMIN, MEMBER, INVITED
}

input CreateTeamInput {
    tid: String!
    name: String
}

input UpdateTeamInput {
    id: ID!
    tid: String
    name: String
}

type Member {
    profile: Profile!
    permission: TeamPermission!
}

input InviteMembersInput {
    teamId: ID!
    profileIds: [ID!]!
}

input RemoveMemberInput {
    teamId: ID!
    profileId: ID!
}

input UpdateMemberPermissionInput {
    teamId: ID!
    profileId: ID!
    permissionLevel: PermissionLevel!
}

type Meeting {
    id: ID!
    name: String!
    state: MeetingState!
}

enum MeetingState {
    NEW, ACTIVE, CONCLUDED
}

input CreateMeetingInput {
    teamId: ID!
    name: String!
}